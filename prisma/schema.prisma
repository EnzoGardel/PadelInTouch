generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  opening   String? // "08:00-23:00" (opcional)
  courts    Court[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id           Int           @id @default(autoincrement())
  locationId   Int
  name         String
  surface      String?
  indoor       Boolean       @default(false)
  location     Location      @relation(fields: [locationId], references: [id])
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([locationId])
}

model User {
  id           String        @id // id de tu auth (o UUID v4)
  email        String        @unique
  fullName     String?
  phone        String?
  isAdmin      Boolean       @default(false)
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id              Int       @id @default(autoincrement())
  userId          String
  courtId         Int
  reservationDate DateTime
  startTime       String
  endTime         String
  startDt         DateTime?
  endDt           DateTime?

  status        String   @default("pending")
  paymentStatus String   @default("pending")
  totalAmount   Decimal? @db.Decimal(10, 2)
  notes         String?

  user  User  @relation(fields: [userId], references: [id])
  court Court @relation(fields: [courtId], references: [id])

  // ðŸ‘‡ lado opuesto (opcional)
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courtId, reservationDate, startTime])
  @@index([courtId, reservationDate])
  @@index([userId])
}

model Payment {
  id            Int     @id @default(autoincrement())
  reservationId Int
  method        String
  status        String  @default("pending")
  amount        Decimal @db.Decimal(10, 2)
  metadata      Json?

  // RelaciÃ³n correcta (con FK explÃ­cita)
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reservationId])
}
